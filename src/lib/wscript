from logging import fatal, info, warning

files = """
	aes.c
	audio.c
	auth.c
	buf.c
	channel.c
	commands.c
	despotify.c
	dns.c
	handlers.c
	hmac.c
	keyexchange.c
	network.c
	packet.c
	playlist.c
	puzzle.c
	session.c
	sha1.c
	shn.c
	sndqueue.c
	util.c
	xml.c
	""".split()



# Audio output plugins
class Coreaudio:
	def find(self, conf):
		if not conf.check_cc(header_name='AudioUnit/AudioUnit.h', defines="HAVE_COREAUDIO"):
			return False

		return True

	def conf(self, conf):
		conf.env['LINKFLAGS_coreaudio'] = ['-framework CoreAudio', '-framework AudioUnit']
		conf.env['LIBS_audio'] = 'coreaudio'
		conf.env['SOURCE_audio'] = 'coreaudio.c'


class Gstreamer:
	def find(self, conf):
		if not conf.check_cfg(package = 'gstreamer-base-0.10', args = '--cflags --libs', uselib_store = 'gstreamer-base-0.10'):
			return False

		conf.check_tool('glib2')

		return True

	def conf(self, conf):
		conf.env['MARSHAL_gstapp'] = True
		conf.env['LIBS_audio'] = 'gstreamer-base-0.10'
		conf.env['SOURCE_audio'] = 'gstreamer.c gstapp/gstappsrc.c gstapp/gstappbuffer.c'


class Libao:
	def find(self, conf):
		if not conf.check_cfg(package = 'ao', args = '--cflags --libs', uselib_store = 'ao'):
			return False

		return True

	def conf(self, conf):
		conf.env['LIBS_audio'] = 'ao'
		conf.env['SOURCE_audio'] = 'libao.c'


class Pulseaudio:
	def find(self, conf):
		if not conf.check_cc(lib = 'pulseaudio', uselib_store = 'pulseaudio'):
			return False

		return True

	def conf(self, conf):
		conf.env['LIBS_audio'] = 'pulseaudio'
		conf.env['SOURCE_audio'] = 'pulseaudio.c'



def set_options(opt):
	opt.add_option('--audio-output', type = 'string', dest = 'audiolib', help = 'Select audio output plugin')


def configure(conf):
	import Options


	if Options.options.debug:
		conf.env['DEFINES_libdespotify'] = ['DEBUG']


	# Configure required library dependencies
	for pkg in ['openssl', 'vorbis', 'vorbisfile']:
		if not conf.check_cfg(package = pkg, args = '--cflags --libs', uselib_store = pkg):
			return False


	for lib in ['expat', 'z']:
		if not conf.check_cc(lib = lib, uselib_store = lib):
			return False



	# Platform specific settings
	if Options.platform == 'linux':
		if not conf.check_cc(lib = 'resolv', uselib_store = 'resolv'):
			return False

	elif Options.platform == 'darwin':
		if not conf.check_cc(lib = 'resolv', uselib_store = 'resolv'):
			return False

	elif Options.platform == 'freebsd':
		pass

	elif Options.platform == 'win32':
		pass


	audiooutputs = {
		'coreaudio': Coreaudio(),
		'gstreamer': Gstreamer(),
		'libao': Libao(),
		'pulseaudio': Pulseaudio()
	}
	audio = False


	if Options.options.audiolib:
		# Override defaults
		audio = Options.options.audiolib
		if audiooutputs.has_key(audio):
			if not audiooutputs[audio].find(conf):
				return False
		else:
			fatal('Specified audio output (%s) does not exist!' % audio)
			return False
	else:
		# Use first useable lib found on the system
		for name, lib in audiooutputs.items():
			if lib.find(conf):
				audio = name
				break

	if audio:
		audiooutputs[audio].conf(conf)
		warning('Using %s as audio output' % audio)
	else:
		fatal('No usable audio output available!')
		return False

	return True


def build(bld):
	obj = bld.new_task_gen('cc', 'shlib')
	obj.target = 'despotify'
	obj.source = files + bld.env['SOURCE_audio'].split()
	obj.uselib = 'expat resolv openssl vorbis vorbisfile z ' + bld.env['LIBS_audio']
	obj.defines = bld.env['DEFINES_libdespotify']

	if bld.env['MARSHAL_gstapp']:
		obj.includes = 'gstapp'
		obj.add_marshal_file('gstapp/gstapp-marshal.list', 'gst_app_marshal')

	bld.install_files('${PREFIX}/include/despotify', 'despotify.h')
	bld.install_files('${PREFIX}/include/despotify', 'playlist.h')
	bld.install_files('${PREFIX}/lib/pkgconfig', 'despotify.pc')
